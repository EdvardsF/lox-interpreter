expression → assignment ;
assignment → ( call "." )? IDENTIFIER "=" assignment
            | logic_or ;
logic_or → logic_and ( "or" logic_and )* ;
logic_and → equality ( "and" equality )* ;
equality → comparison ( ( "!=" | "==" ) comparison )* ;
comparison → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term → factor ( ( "-" | "+" ) factor )* ;
factor → unary ( ( "/" | "*" ) unary )* ;
unary → ( "!" | "-" ) unary
        | call
call → primary ( "(" arguments? ")" | "." IDENTIFIER )* ;
arguments → expression ( "," expression )* ;
primary → NUMBER | STRING | IDENTIFIER
        | "true" | "false" | "nil" | "this" | "(" expression ")"
        | "super" "." IDENTIFIER ;

program → declaration* EOF ;
declaration → classDecl
        funDecl
        | varDecl
        | statement;
classDecl → "class" IDENTIFIER ( "<" IDENTIFIER )? "{" function* "}"
funDecl → "fun" function ;
function → IDENTIFIER "(" parameters? ")" block ;
parameters → IDENTIFIER ( "," IDENTIFIER )* ;
statement → exprStmt
        | forStmt
        | ifStmt
        | printStmt
        | returnStmt
        | whileStmt
        | block ;
exprStmt → expression ";" ;
forStmt → "for" "(" ( varDecl | exprStmt | ";")
        expression? ";"
        expression? ")" statement ;
ifStmt → "if" "(" expression ")" statement
        ( "else" statement )? ;
returnStmt → "return" expression? ";" ;
whileStmt → "while" "(" expression ")" statement ;
printStmt → "print" expression ";" ;
block → "{" declaration* "}"
